<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.xyc.cs.dao.SelectionMapper">
  <resultMap id="BaseResultMap" type="org.xyc.cs.entity.Selection">
    <constructor>
      <idArg column="selection_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="course_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="student_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="classroom" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="classtime" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    selection_id, course_id, student_id, classroom, classtime, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="org.xyc.cs.entity.SelectionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_selection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_selection
    where selection_id = #{selectionId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_selection
    where selection_id = #{selectionId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.xyc.cs.entity.SelectionExample">
    delete from tb_selection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.xyc.cs.entity.Selection">
    insert into tb_selection (selection_id, course_id, student_id, 
      classroom, classtime, create_time, 
      update_time)
    values (#{selectionId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, 
      #{classroom,jdbcType=VARCHAR}, #{classtime,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.xyc.cs.entity.Selection">
    insert into tb_selection
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="selectionId != null">
        selection_id,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
      <if test="classroom != null">
        classroom,
      </if>
      <if test="classtime != null">
        classtime,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="selectionId != null">
        #{selectionId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="classroom != null">
        #{classroom,jdbcType=VARCHAR},
      </if>
      <if test="classtime != null">
        #{classtime,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.xyc.cs.entity.SelectionExample" resultType="java.lang.Long">
    select count(*) from tb_selection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_selection
    <set>
      <if test="record.selectionId != null">
        selection_id = #{record.selectionId,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null">
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.classroom != null">
        classroom = #{record.classroom,jdbcType=VARCHAR},
      </if>
      <if test="record.classtime != null">
        classtime = #{record.classtime,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_selection
    set selection_id = #{record.selectionId,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      classroom = #{record.classroom,jdbcType=VARCHAR},
      classtime = #{record.classtime,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.xyc.cs.entity.Selection">
    update tb_selection
    <set>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="classroom != null">
        classroom = #{classroom,jdbcType=VARCHAR},
      </if>
      <if test="classtime != null">
        classtime = #{classtime,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where selection_id = #{selectionId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.xyc.cs.entity.Selection">
    update tb_selection
    set course_id = #{courseId,jdbcType=INTEGER},
      student_id = #{studentId,jdbcType=INTEGER},
      classroom = #{classroom,jdbcType=VARCHAR},
      classtime = #{classtime,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where selection_id = #{selectionId,jdbcType=INTEGER}
  </update>
  <resultMap id="BaseResultMap" type="org.xyc.cs.entity.Selection">
    <constructor>
      <idArg column="selection_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="course_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="student_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="classroom" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="classtime" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    selection_id, course_id, student_id, classroom, classtime, create_time, update_time
  </sql>
  <select id="selectByExample" parameterType="org.xyc.cs.entity.SelectionExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_selection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from tb_selection
    where selection_id = #{selectionId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_selection
    where selection_id = #{selectionId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.xyc.cs.entity.SelectionExample">
    delete from tb_selection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.xyc.cs.entity.Selection">
    insert into tb_selection (selection_id, course_id, student_id, 
      classroom, classtime, create_time, 
      update_time)
    values (#{selectionId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER}, 
      #{classroom,jdbcType=VARCHAR}, #{classtime,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.xyc.cs.entity.Selection">
    insert into tb_selection
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="selectionId != null">
        selection_id,
      </if>
      <if test="courseId != null">
        course_id,
      </if>
      <if test="studentId != null">
        student_id,
      </if>
      <if test="classroom != null">
        classroom,
      </if>
      <if test="classtime != null">
        classtime,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="selectionId != null">
        #{selectionId,jdbcType=INTEGER},
      </if>
      <if test="courseId != null">
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        #{studentId,jdbcType=INTEGER},
      </if>
      <if test="classroom != null">
        #{classroom,jdbcType=VARCHAR},
      </if>
      <if test="classtime != null">
        #{classtime,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.xyc.cs.entity.SelectionExample" resultType="java.lang.Long">
    select count(*) from tb_selection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_selection
    <set>
      <if test="record.selectionId != null">
        selection_id = #{record.selectionId,jdbcType=INTEGER},
      </if>
      <if test="record.courseId != null">
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.studentId != null">
        student_id = #{record.studentId,jdbcType=INTEGER},
      </if>
      <if test="record.classroom != null">
        classroom = #{record.classroom,jdbcType=VARCHAR},
      </if>
      <if test="record.classtime != null">
        classtime = #{record.classtime,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_selection
    set selection_id = #{record.selectionId,jdbcType=INTEGER},
      course_id = #{record.courseId,jdbcType=INTEGER},
      student_id = #{record.studentId,jdbcType=INTEGER},
      classroom = #{record.classroom,jdbcType=VARCHAR},
      classtime = #{record.classtime,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.xyc.cs.entity.Selection">
    update tb_selection
    <set>
      <if test="courseId != null">
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="studentId != null">
        student_id = #{studentId,jdbcType=INTEGER},
      </if>
      <if test="classroom != null">
        classroom = #{classroom,jdbcType=VARCHAR},
      </if>
      <if test="classtime != null">
        classtime = #{classtime,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where selection_id = #{selectionId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.xyc.cs.entity.Selection">
    update tb_selection
    set course_id = #{courseId,jdbcType=INTEGER},
      student_id = #{studentId,jdbcType=INTEGER},
      classroom = #{classroom,jdbcType=VARCHAR},
      classtime = #{classtime,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where selection_id = #{selectionId,jdbcType=INTEGER}
  </update>
</mapper>